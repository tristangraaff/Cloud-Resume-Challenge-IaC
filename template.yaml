AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge-iac

  SAM Template for cloud-resume-challenge-iac

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  UpdateReplacePolicySetting:
    Type: String
    Default: Delete

  DeletionPolicySetting:
    Type: String
    Default: Delete

  FrontEndBucketName:
    Type: String
    Default: tristantech.org-iac
    Description: Name of the S3 bucket where the front-end content of the application is stored
  
  LambdaBucketName:
    Type: String
    Default: tristantech.org-iac-lambda
    Description: Name of the S3 bucket where the Lambda content of the application is stored
  
  DomainAlias1:
    Type: String
    Default: tristantech.org

  DomainAlias2:
    Type: String
    Default: www.tristantech.org

  DynamoDBTableName:
    Type: String
    Default: website-visits-iac

Resources:
  FrontEndBucket:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: AWS::S3::Bucket
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Ref FrontEndBucketName
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      #LoggingConfiguration:
        #TargetObjectKeyFormat:
          #PartitionedPrefix:
            #PartitionDateSource: EventTime
        #DestinationBucketName: logs.tristantech.org
        #LogFilePrefix: logs/

  FrontEndBucketPolicy:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      Bucket: !Ref FrontEndBucketName
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Condition:
              StringEquals:
                AWS:SourceArn: 
                  Fn::Join:
                   - ''
                   - - 'arn:aws:cloudfront::'
                     - !Ref 'AWS::AccountId'
                     - ':distribution/'
                     - !Ref CloudFrontDistribution
            Resource: !Sub 'arn:aws:s3:::${FrontEndBucketName}/*'
            Action: s3:GetObject
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Sid: AllowCloudFrontServicePrincipal
        Id: PolicyForCloudFrontPrivateContent

  CloudFrontCachePolicy:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: AWS::CloudFront::CachePolicy
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      CachePolicyConfig:
        Comment: "Policy with caching enabled. Supports Gzip and Brotli compression."
        MinTTL: 1
        MaxTTL: 3.1536E7
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: "none"
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: "none"
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingGzip: true
        DefaultTTL: 86400
        Name: "Custom-CachingOptimized"

  CloudFrontDistribution:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::CloudFront::Distribution"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      DistributionConfig:
        Logging:
          IncludeCookies: false
          Bucket: ""
          Prefix: ""
        Comment: ""
        DefaultRootObject: "index.html"
        Origins:
        - ConnectionTimeout: 10
          OriginAccessControlId:
            Ref: "CloudFrontOriginAccessControl"
          ConnectionAttempts: 3
          OriginCustomHeaders: []
          DomainName:
            Fn::GetAtt:
            - "FrontEndBucket"
            - "RegionalDomainName"
          OriginShield:
            Enabled: false
          S3OriginConfig:
            OriginAccessIdentity: ""
          OriginPath: ""
          Id: !Ref FrontEndBucketName
        ViewerCertificate:
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
          AcmCertificateArn: !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/80bf7507-ed8a-4de8-b7eb-56ef0c286e42"
        PriceClass: "PriceClass_100"
        DefaultCacheBehavior:
          Compress: true
          FunctionAssociations: []
          LambdaFunctionAssociations: []
          TargetOriginId: !Ref FrontEndBucketName
          ViewerProtocolPolicy: "redirect-to-https"
          GrpcConfig:
            Enabled: false
          TrustedSigners: []
          FieldLevelEncryptionId: ""
          TrustedKeyGroups: []
          AllowedMethods:
          - "HEAD"
          - "GET"
          CachedMethods:
          - "HEAD"
          - "GET"
          SmoothStreaming: false
          CachePolicyId:
            Ref: "CloudFrontCachePolicy"
        Staging: false
        CustomErrorResponses:
        - ErrorCachingMinTTL: 10
          ResponseCode: 403
          ErrorCode: 403
          ResponsePagePath: "/error-pages/403.html"
        - ErrorCachingMinTTL: 10
          ResponseCode: 404
          ErrorCode: 404
          ResponsePagePath: "/error-pages/404.html"
        ContinuousDeploymentPolicyId: ""
        OriginGroups:
          Quantity: 0
          Items: []
        Enabled: true
        Aliases:
        - !Ref DomainAlias1
        - !Ref DomainAlias2
        IPV6Enabled: true
        WebACLId: !Sub "arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/CreatedByCloudFront-891b1432-5997-49e0-855f-bb709f051c9d/25a6a306-4657-4b01-8950-fe03f500012a"
        HttpVersion: "http2"
        Restrictions:
          GeoRestriction:
            Locations: []
            RestrictionType: "none"
        CacheBehaviors: []

  CloudFrontOriginAccessControl:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::CloudFront::OriginAccessControl"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: "always"
        Description: ""
        SigningProtocol: "sigv4"
        OriginAccessControlOriginType: "s3"
        Name: "${FrontEndBucket}.s3.eu-central-1.amazonaws.com"
    
  myDNS:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: Z00273233K0LGAJK7OZOH
      RecordSets:
        - Name: !Ref DomainAlias1
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt 
              - CloudFrontDistribution
              - DomainName
        - Name: !Ref DomainAlias2
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt 
            - CloudFrontDistribution
            - DomainName

  LambdaBucket:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: AWS::S3::Bucket
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Ref LambdaBucketName
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DynamoDBTable:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: !Ref  DynamoDBTableName
      AttributeDefinitions:
      - AttributeType: "S"
        AttributeName: "count_id"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
        RecoveryPeriodInDays: 35
      WarmThroughput:
        ReadUnitsPerSecond: 12000
        WriteUnitsPerSecond: 4000
      KeySchema:
      - KeyType: "HASH"
        AttributeName: "count_id"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: countNumberOfWebsiteVisits
      Handler: countNumberOfWebsiteVisits.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaRole.Arn
      Code: ./lambda/

  LambdaPOSTPermissionForAPIGateway:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "MyLambdaFunction"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:eu-central-1:${AWS::AccountId}:a3sfkwdhr3/*/POST/visitors"
      Principal: "apigateway.amazonaws.com"

  LambdaGETPermissionForAPIGateway:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "MyLambdaFunction"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:eu-central-1:${AWS::AccountId}:a3sfkwdhr3/*/GET/visitors"
      Principal: "apigateway.amazonaws.com"

  LambdaRole:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::IAM::Role"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      Path: "/service-role/"
      MaxSessionDuration: 3600
      RoleName: "countNumberOfWebsiteVisits-role"
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: !Sub "arn:aws:dynamodb:eu-central-1:${AWS::AccountId}:table/${DynamoDBTableName}"
            Action: "dynamodb:GetItem"
            Effect: "Allow"
            Sid: "AllowGetItemCommand"
        PolicyName: "AllowGetItemCommand"
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: !Sub "arn:aws:dynamodb:eu-central-1:${AWS::AccountId}:table/${DynamoDBTableName}"
            Action: "dynamodb:UpdateItem"
            Effect: "Allow"
            Sid: "AllowUpdateItemCommand"
        PolicyName: "AllowUpdateItemCommand"
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Resource: !Sub "arn:aws:lambda:eu-central-1:${AWS::AccountId}:function:allowMultipleOrigins"
            Action: "lambda:InvokeFunction"
            Effect: "Allow"
            Sid: "AllowUpdateItemCommand"
        PolicyName: "AllowUpdateItemCommand"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"

  IAMManagedPolicy:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      ManagedPolicyName: "AWSLambdaBasicExecutionRole-IAMManagedPolicy"
      Path: "/service-role/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:aws:logs:eu-central-1:${AWS::AccountId}:*"
          Action: "logs:CreateLogGroup"
          Effect: "Allow"
        - Resource:
          - !Sub "arn:aws:logs:eu-central-1:${AWS::AccountId}:log-group:/aws/lambda/countNumberOfWebsiteVisits:*"
          Action:
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Effect: "Allow"
      Roles:
      - Ref: LambdaRole
      Users: []

  ApiGatewayRestApi:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::ApiGateway::RestApi"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      ApiKeySourceType: "HEADER"
      EndpointConfiguration:
        Types:
        - "REGIONAL"
      DisableExecuteApiEndpoint: false
      Name: "VisitCounterAPI"

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: visitors
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayDeployment:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::ApiGateway::Deployment"
    DeletionPolicy: !Ref DeletionPolicySetting
    DependsOn:
     - ApiGatewayGetMethod
     - ApiGatewayPostMethod
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi"

  ApiGatewayStage:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::ApiGateway::Stage"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi"
      DeploymentId: 
       Ref: "ApiGatewayDeployment"
      StageName: "prod"
      CacheClusterSize: "0.5"
      TracingEnabled: false
      CacheClusterEnabled: false

  ApiGatewayGetMethod:    
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      MethodResponses:
       - StatusCode: 200
         ResponseParameters: { "method.response.header.Access-Control-Allow-Origin": "true" }
         ResponseModels: { "application/json": "Empty" }
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt MyLambdaFunction.Arn
        RequestTemplates:
          application/json: |
            {
                "http-method": "$context.httpMethod"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Sub "'https://${DomainAlias1}'"
      ResourceId: !GetAtt ApiGatewayResource.ResourceId
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: "NONE"

  ApiGatewayPostMethod:    
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "POST"
      MethodResponses:
       - StatusCode: 200
         ResponseParameters: { "method.response.header.Access-Control-Allow-Origin": "true" }
         ResponseModels: { "application/json": "Empty" }
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt MyLambdaFunction.Arn
        RequestTemplates:
          application/json: |
            {
                "http-method": "$context.httpMethod"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Sub "'https://${DomainAlias1}'"
      ResourceId: !GetAtt ApiGatewayResource.ResourceId
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: "NONE"

  ApiGatewayOptionsMethod:    
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "OPTIONS"
      MethodResponses:
       - StatusCode: 200
         ResponseParameters: 
          "method.response.header.Access-Control-Allow-Origin": "true"
          "method.response.header.Access-Control-Allow-Methods": "true"
          "method.response.header.Access-Control-Allow-Headers": "true"
         ResponseModels: { "application/json": "Empty" }
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt AllowMultipleOriginsLambdaFunction.Arn
        RequestTemplates:
          application/json: |
            {
                "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Sub "'https://${DomainAlias1}'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST, GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'" 
      ResourceId: !GetAtt ApiGatewayResource.ResourceId
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: "NONE"
  
  AllowMultipleOriginsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: allowMultipleOrigins
      Handler: allowMultipleOrigins.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaRole.Arn
      Code: ./lambda/

  LambdaOPTIONSPermissionForAPIGateway:
    UpdateReplacePolicy: !Ref UpdateReplacePolicySetting
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: !Ref DeletionPolicySetting
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "AllowMultipleOriginsLambdaFunction"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:eu-central-1:${AWS::AccountId}:a3sfkwdhr3/*/OPTIONS/visitors"
      Principal: "apigateway.amazonaws.com"
    